cP <- sapply(int, function(i) { length(p[p<=i]) })
cP
plot(cP)
plot(cP, freq=TRUE)
hist(cP, freq=TRUE)
cX <- c( rep(265,0.05))
cX
cX <- c( rep(0.05, 265) )
cX
cP
cX <- c( rep(0.05, 265),  rep(0.1, 742), rep(0.15, 852),  rep(0.2, 1282),)
cX <- c( rep(0.05, 265),  rep(0.1, 742), rep(0.15, 852),  rep(0.2, 1282))
hist(cX, freq=FALSE, xlim=c(0,1))
cP
cX <- c( rep(0.05, 265),  rep(0.1, 742), rep(0.15, 852),  rep(0.2, 1282), rep(0.25,1602), rep(0.3, 1689), rep(0.35, 2009), rep(0.4, 2263),
rep(0.45,2475), rep(0.5, 2663), rep(0.55, 2842), rep(0.6, 3015), rep(0.65, 3143), rep(0.7, 3288), rep(0.75, 3423), rep(0.8, 3541),
rep(0.85,3677), rep(0.9, 3779), rep(0.95, 3860), rep(1.0, 3962) )
hist(cX, freq=FALSE, xlim=c(0,1))
hist(cX, freq=TRUE, xlim=c(0,1))
cX <- c( rep(0,1), rep(0.05, 265),  rep(0.1, 742), rep(0.15, 852),  rep(0.2, 1282), rep(0.25,1602), rep(0.3, 1689), rep(0.35, 2009), rep(0.4, 2263),
rep(0.45,2475), rep(0.5, 2663), rep(0.55, 2842), rep(0.6, 3015), rep(0.65, 3143), rep(0.7, 3288), rep(0.75, 3423), rep(0.8, 3541),
rep(0.85,3677), rep(0.9, 3779), rep(0.95, 3860), rep(1.0, 3962) )
hist(cX, freq=TRUE, xlim=c(0,1))
hist(cX, freq=TRUE, xlim=c(0,1), ylim=c(0,1))
hist(cX, freq=FALSE, xlim=c(0,1), ylim=c(0,1))
hist(cX, freq=FALSE)
cX <- c( rep(0.05, 265),  rep(0.1, 742), rep(0.15, 852),  rep(0.2, 1282), rep(0.25,1602), rep(0.3, 1689), rep(0.35, 2009), rep(0.4, 2263),
rep(0.45,2475), rep(0.5, 2663), rep(0.55, 2842), rep(0.6, 3015), rep(0.65, 3143), rep(0.7, 3288), rep(0.75, 3423), rep(0.8, 3541),
rep(0.85,3677), rep(0.9, 3779), rep(0.95, 3860), rep(1.0, 3962) )
hist(cX, freq=FALSE)
hist(cX, freq=FALSE, xlim=c(0.05,1))
hist(cX, freq=FALSE, xlim=c(0.05,1))
hist(cX, freq=FALSE, xlim=c(0.1,1))
density(cX)
help(density)
plot(density(cX))
plot(1-ecdf(p))
plot(ecdf(p))
hist(cX, freq=FALSE, include.lowest = FASLE)
hist(cX, freq=FALSE, include.lowest = FALSE)
cX <- c( rep(0.0, 1), rep(0.05, 265),  rep(0.1, 742), rep(0.15, 852),  rep(0.2, 1282), rep(0.25,1602), rep(0.3, 1689), rep(0.35, 2009), rep(0.4, 2263),
rep(0.45,2475), rep(0.5, 2663), rep(0.55, 2842), rep(0.6, 3015), rep(0.65, 3143), rep(0.7, 3288), rep(0.75, 3423), rep(0.8, 3541),
rep(0.85,3677), rep(0.9, 3779), rep(0.95, 3860), rep(1.0, 3962) )
hist(cX, freq=FALSE, include.lowest = FALSE)
cX <- sample(1:90)
cX
hist(cX, freq=FALSE, include.lowest = FALSE)
hist(cX, freq=FALSE)
hist(cX, freq=TRUE)
hist(cX, freq=TRUE, ylim=c(0,90))
cX <- rnorm(20, 2,3)
cX
hist(cX, freq=TRUE, ylim=c(0,90))
hist(cX, freq=FALSE)
help(rgeom)
dgeom(3, 0.5)
pgeom(3, 0.5)
rgeom(3, 0.5)
pgeom(1, 0.5)
pgeom(10, 0.5)
pgeom(100, 0.5)
pgeom(2, 0.5)
dgeom(2, 0.5)
dgeom(1, 0.5)
dgeom(3, 0.5)
help(dhyper)
dhyper(10000, 9900, 10, 2)
dhyper(10000, 9900, 10, 1)
dhyper(10000, 9000, 1000, 1)
dhyper(2, 100, 100, 9900)
dhyper(2, 100, 9900, 100)
dhyper(2, 100, 9900, 10)
dgeom(2, 0.01)
dhyper(2, 100, 9000, 10)
help(binom)
help(bi)
??binom
help(bion)
help(bin)
help(dbinom)
dgeom(2, 10, 0.01)
dbinom(1,20,0.01)
dbinom(2,10,0.01)
dhyper(2, 100, 9000, 10)
dbinom(1,1,0.5)
pbinom(0.5,1,0.5)
pbinom(1,1,0.5)
pbinom(1,2,0.5)
pbinom(2,2,0.5)
pbinom(0,2,0.5)
pbinom(1,5,0.5)
pbinom(2,5,0.5)
dbinom(0,5,0.5) + dbinom(1,5,0.5) + dbinom(2,5,0.5)
dbinom(2,5,0.5)
dbinom(1,5,0.5)
dbinom(0,5,0.5)
??goSemSim
library("GOSemSim")
goSim("GO:0004022", "GO:0005515", ont = "MF", measure = "Wang")
goSim("GO:0006281", "GO:0043504", ont = "BP", measure = "Resnik")
goSim("GO:0006281", "GO:0071704", ont = "BP", measure = "Resnik")
goSim("GO:0006281", "GO:0016143", ont = "BP", measure = "Resnik")
goSim("GO:0006281", "GO:0046433", ont = "BP", measure = "Resnik")
goSim("GO:1901160", "GO:0046433", ont = "BP", measure = "Resnik")
goSim("GO:1901160", "GO:0031668", ont = "BP", measure = "Resnik")
goSim("GO:0031131", "GO:0031668", ont = "BP", measure = "Resnik")
goSim("GO:0023052", "GO:0031668", ont = "BP", measure = "Resnik")
help(table)
help(barplot)
help(boxplot)
list(3,2)
r1 = rnorm(1000, 1, 2)
r2 = rnorm(1000, 1, 6)
list(r1,r2)
help(list)
help(scatterplot)
help(plot)
help(data.frame)
v1 = c(r1,r2)
se(10)
seq(10)
rep(10)
rep(1,10)
rep("2",10)
v2 = c( rep("2",1000), rep("6",1000) )
df <- data.frame(1)
df
df <- data.frame(1,3)
df
df <- data.frame(v1,v2)
head(df)
help(transform)
help(oma)
??oma
pchShow()
pchShow
par(mar)
par("mar")
help(gl)
g <- gl(2, 50)
g
g <- gl(2, 50, labels=c("A", "B"))
g
help(sapply)
r <- sapply(seq(0,10), function(i){return rnorm(100, 0, i)}
r <- sapply(seq(0,10), function(i){return rnorm(100, 0, i)})
seq(0,10)
r <- sapply(seq(1,10), function(i){return rnorm(100, 0, i)})
r <- sapply(seq(1,10), function(i) return rnorm(100, 0, i))
r <- sapply(seq(1,10), function(x) {return rnorm(100, 0, x)} )
r <- sapply(seq(1,10), function(x) {return x} )
r <- sapply(seq(1,10), function(x) x)
r
r <- sapply(seq(1,10), function(x) rnorm(100,0,x))
r
class(r)
data.frame(r)
help(data.frame)
data.frame(r, fac=seq(1,10))
data.frame(r, fac=seq(1:10, each=100))
f <- rep(1:10, each=100)
f
data.frame(r, fac=f)
help(histogram)
??histogram
histogram(rnorm(100))
library(lattice)
help(histogram)
histogram(rnorm(100))
f <- rep(1:10, each=100)
r <- data.frame(sapply(seq(1,10), function(x) rnorm(100,0,x)))
histogram(rnorm(1000,1,0)|f, layout=c(10,1))
f
histogram(~rnorm(1000,1,0) | f, layout=c(10,1))
f <- rep(1:10, each=100)
r <- data.frame(sapply(seq(1,10), function(x) rnorm(100,0,x)))
histogram(~r | f, layout=c(10,1))
f <- rep(1:10, each=100)
r <- c(sapply(seq(1,10), function(x) rnorm(100,0,x)))
histogram(~r | f, layout=c(10,1))
f <- rep(1:10, each=100)
r <- c(sapply(seq(1,10), function(x) rnorm(1000,0,x)))
histogram(~r | f, layout=c(5,2))
f <- rep(1:10, each=100)
r <- c(sapply(seq(1,50,5), function(x) rnorm(1000,0,x)))
histogram(~r | f, layout=c(5,2))
f <- rep(1:10, each=100)
r <- c(sapply(seq(1,50,5), function(x) rnorm(1000,0,x)))
histogram(~sort(r) | f, layout=c(5,2))
f <- rep(1:10, each=100)
r <- c(sapply(seq(1,50,5), function(x) rnorm(1000,0,x)))
histogram(~r | f, layout=c(5,2))
wnif(0.75)
qunif(0.75)
0.48/0.75
0.75*0.3+0.25*0.7
0.75*0.3
0.75*0.3/0.4
0.75*0.3/(0.75*0.3+0.48*0.7)
library(table)
install(table)
library(xtable)
help(line)
help(aggregate)
help(tranform)
help(transform)
help(aggregate)
attach(mtcars)
aggdata <-aggregate(mtcars, by=list(cyl,vs),
FUN=mean, na.rm=TRUE)
print(aggdata)
head(mtcars)
df <- df[-which(is.na(df$steps)),]
setwd("/home/thodoris/Courses//DataScience/Reproducible_Research/week-2/project/RepData_PeerAssessment1/")
df <- read.csv("./activity.csv", header=TRUE)
df <- df[-which(is.na(df$steps)),]
df <- aggregate(df, by=list(date), FUN=mean)
s <- aggregate(df, by=list(date), FUN=mean)
s <- aggregate(steps, by=list(date), data=df, FUN=mean)
df <- df[-which(is.na(df$steps)),]
s <- aggregate(df$steps, by=list(date), FUN=mean)
df <- df[-which(is.na(df$steps)),]
s <- aggregate(x=list(df$steps), by=list(df$date), FUN=mean)
df <- read.csv("./activity.csv", header=TRUE)
names(df)
df <- df[-which(is.na(df$steps)),]
s <- aggregate(x=list(df$steps), by=list(df$date), FUN=mean)
s
class(s)
df <- df[-which(is.na(df$steps)),]
s <- aggregate(x=("daily_steps" = list(df$steps)), by=("date" = list(df$date)), FUN=mean)
class(s)
df <- df[-which(is.na(df$steps)),]
s <- aggregate(x=(list("daily_steps"=df$steps)), by=(list("date" = df$date)), FUN=mean)
df <- read.csv("./activity.csv", header=TRUE)
df <- df[-which(is.na(df$steps)),]
s <- aggregate(x=list("daily_steps"=df$steps), by=list("date" = df$date), FUN=mean)
class(s)
s
hist(s$daily_steps)
s <- aggregate(x=list("daily_steps"=df$steps), by=list("date" = df$date), FUN=sum)
class(s)
head(df)
class(s)
s
hist(s$daily_steps)
mean(stepsPerDay$daily_steps)
stepsPerDay <- aggregate(x=list("daily_steps"=df$steps), by=list("date" = df$date), FUN=sum) # data frame
mean(stepsPerDay$daily_steps)
median(stepsPerDay$daily_steps)
stepsPerInt <- aggregate(x=list("int_steps"=df$steps), by=list("interval" = df$interval), FUN=mean)
head(stepsPerInt)
plot(stepsPerInt$int_steps, stepsPerInt$interval)
plot(stepsPerInt$int_steps, stepsPerInt$interval, type="l")
plot(stepsPerInt$interval, stepsPerInt$int_steps, type="l")
plot(stepsPerInt$interval, stepsPerInt$int_steps, type="l", xlab="Daily interval", ylab="Mean of steps", main="Average steps for each daily interval")
which(max(stepsPerInt$int_steps))
max(stepsPerInt$int_steps)
index(max(stepsPerInt$int_steps))
which(max(stepsPerInt$int_steps))
which(stepsPerInt$int_steps==max(stepsPerInt$int_steps))
stepsPerInt$interval[which(stepsPerInt$int_steps==max(stepsPerInt$int_steps))]
df <- read.csv("./activity.csv", header=TRUE)
stepsPerDay <- aggregate(x=list("daily_steps"=df$steps), by=list("date" = df$date), FUN=sum, rm.na=TRUE) # data frame
hist(stepsPerDay$daily_steps, breaks=nrow(stepsPerDay)/2, col="blue", main="Daily steps", xlab="Number of steps")
mean(stepsPerDay$daily_steps)
median(stepsPerDay$daily_steps)
stepsPerDay <- aggregate(x=list("daily_steps"=df$steps), by=list("date" = df$date), FUN=sum, na.rm=TRUE) # data frame
hist(stepsPerDay$daily_steps, breaks=nrow(stepsPerDay)/2, col="blue", main="Daily steps", xlab="Number of steps")
mean(stepsPerDay$daily_steps)
median(stepsPerDay$daily_steps)
stepsPerInt <- aggregate(x=list("int_steps"=df$steps), by=list("interval" = df$interval), FUN=mean)
plot(stepsPerInt$interval, stepsPerInt$int_steps, type="l",
xlab="Daily interval", ylab="Mean of steps", main="Average steps for each daily interval")
head(df)
sapply(1:length(df) function(i) {i})
sapply(1:length(df), function(i) {i})
sapply(1:nrows(df), function(i) {
if is.na(df[i,1]){
df[1,1]
is.na(df[1,1])
sapply(1:nrows(df), function(i) {
if (is.na(df[i,1])){
df[i,1] <- 3
}
})
sapply(1:nrow(df), function(i) {
if (is.na(df[i,1])){
df[i,1] <- 3
}
})
head(df)
df[1,1] <- 3
head(df)
for(i in 1:nrow(df)) {
if (is.na(df[i,1])){
df[i,1] <- 3
}
})
for(i in 1:nrow(df)) {
if (is.na(df[i,1])){
df[i,1] <- 3
}
}
head(df)
summary(stepsPerInt)
head(stepsPerInt)
df <- read.csv("./activity.csv", header=TRUE)
stepsPerInt <- aggregate(x=list("int_steps"=df$steps), by=list("interval" = df$interval), FUN=mean, na.rm=TRUE)
head(stepsPetInt)
head(stepsPerInt)
heml(split)
help(split)
d <- split(stepsPerInt, stepsPerInt$interval)
d
d[[0]]
d$5
d$'5'
d$'5'[1]
d$'5'[2]
class(d$'5'[2])
d <- split(stepsPerInt$int_steps, stepsPerInt$interval)
d
d$10
d$'10'
intervalsList <- split(stepsPerInt$int_step, stepsPerInt$interval)
d$'10'
head(df)
for(i in 1:nrow(df)) {
if (is.na(df[i,1])){
df[i,1] <- intervalsList$df$interval
}
}
df[1,1]
df[1,2]
df[1,3]
df[2,3]
intervalsList <- split(stepsPerInt$int_step, stepsPerInt$interval)
for(i in 1:nrow(df)) {
if (is.na(df[i,1])){
df[i,1] <- intervalsList$df[i,3]
}
}
df[1,3]
intervalsList$df[1,3]
intervalsList$df[4,3]
intervalsList$'df[4,3]'
intervalsList[df[4,3]]
intervalsList[df[6,3]]
intervalsList[1,2
]
intervalsList[1]
intervalsList[2]
intervalsList[3]
df[6,]
df[6,3]
intervalsList[df[6,3]]
stepsPerInt
stepsPerInt['interval'=5]
stepsPerInt['interval'==5]
stepsPerInt[interval==5]
stepsPerInt[stepsPerInt$intervalinterval==5]
stepsPerInt[stepsPerInt$interval==5]
stepsPerInt
which(stepsPerInt[stepsPerInt$interval==5])
which(stepsPerInt$interval==5)
which(stepsPerInt$interval==0)
which(stepsPerInt$interval==5)
which(stepsPerInt$interval==25)
for(i in 1:nrow(df)) {
if (is.na(df[i,1])){
df[i,1] <- stepsPerInt[which(stepsPerInt$interval==i),2]
}
}
head(df)
for(i in 1:nrow(df)) {
if (is.na(df[i,1])){
stepsPerInt[which(stepsPerInt$interval==i),2]
}
}
for(i in 1:nrow(df)) {
if (is.na(df[i,1])){
h <- stepsPerInt[which(stepsPerInt$interval==i),2]
}
}
h
stepsPerInt[which(stepsPerInt$interval==4),2]
stepsPerInt[which(stepsPerInt$interval==5),2]
for(i in 1:nrow(df)) {
if (is.na(df[i,1])){
h <- stepsPerInt[which(stepsPerInt$interval==df[i,3]),2]
}
}
head(df)
for(i in 1:nrow(df)) {
if (is.na(df[i,1])){
df[i,1] <- stepsPerInt[which(stepsPerInt$interval==df[i,3]),2]
}
}
head(df)
help(weekdays)
weekdays(df)
weekdays(df$date)
weekdays(as.Date(df$date))
df$date <- weekdays(as.Date(df$date))
head(df)
dayFactor <- factor(df$date)
dayFactor
help(factor)
df[,"w"] <- c()
heaf(df)
head(df)
c <- sapply(1:nrow(df), function({if df[]}))
c <- sapply(1:nrow(df), function({}
c <- sapply(1:nrow(df), function({
c <- sapply(1:nrow(df), function({
if (df[i,2] != "Saturday" ||  df[i,2] != "Sunday") {
"weekend"
} else {
"weekday"
}
})
)
c <- sapply(1:nrow(df), function(i){
if (df[i,2] != "Saturday" ||  df[i,2] != "Sunday") {
"weekend"
} else {
"weekday"
}
}
)
c
df$w <- c
head(df)
c <- sapply(1:nrow(df), function(i){
if (df[i,2] == "Saturday" ||  df[i,2] == "Sunday") {
"weekend"
} else {
"weekday"
}
}
)
df$w <- c
head(df)
help(factor)
str(df)
df <- read.csv("./activity.csv", header=TRUE, stringAsFactors=TRUE)
help(read.csv)
df <- read.csv("./activity.csv", header=TRUE, stringsAsFactors=TRUE)
stepsPerDay <- aggregate(x=list("daily_steps"=df$steps), by=list("date" = df$date),
FUN=sum, na.rm=TRUE)
hist(stepsPerDay$daily_steps, breaks=nrow(stepsPerDay)/2, col="blue",
main="Daily steps", xlab="Number of steps")
mean(stepsPerDay$daily_steps)
median(stepsPerDay$daily_steps)
stepsPerInt <- aggregate(x=list("int_steps"=df$steps), by=list("interval" = df$interval), FUN=mean, na.rm=TRUE)
plot(stepsPerInt$interval, stepsPerInt$int_steps, type="l",
xlab="Daily interval", ylab="Mean of steps", main="Average steps for each daily interval")
stepsPerInt$interval[which(stepsPerInt$int_steps==max(stepsPerInt$int_steps))]
nas = which(is.na(df$steps))
length(nas)
for(i in 1:nrow(df)) {
if (is.na(df[i,1])){
df[i,1] <- round(stepsPerInt[which(stepsPerInt$interval==df[i,3]),2], 0)
}
}
stepsPerDay <- aggregate(x=list("daily_steps"=df$steps), by=list("date" = df$date),
FUN=sum, na.rm=TRUE)
hist(stepsPerDay$daily_steps, breaks=nrow(stepsPerDay)/2, col="blue",
main="Daily steps", xlab="Number of steps")
mean(stepsPerDay$daily_steps)
median(stepsPerDay$daily_steps)
df$date <- weekdays(as.Date(df$date))
c <- sapply(1:nrow(df), function(i){
if (df[i,2] == "Saturday" ||  df[i,2] == "Sunday") {
"weekend"
} else {
"weekday"
}
}
)
df$w <- c
str(df)
df <- as.data.frame(df)
str(df)
df <- as.data.frame(unclass(df))
str(df)
df <- transform(df, w=factor(w))
str(df)
stepsPerInt <- aggregate(x=list("int_steps"=df$steps), by=list(df$interval, df$w), FUN=mean, na.rm=TRUE)
head(stepsPerInt)
stepsPerInt
stepsPerInt <- aggregate(x=list("int_steps"=df$steps), by=list("interval"=df$interval, "w"=df$w), FUN=mean, na.rm=TRUE)
xyplot(int_steps~interval | w, data=df, layout=c(1,2))
library(lattice)
xyplot(int_steps~interval | w, data=df, layout=c(1,2))
xyplot(int_steps~interval | w, data=stepsPerInt, layout=c(1,2))
xyplot(int_steps~interval | w, data=stepsPerInt, layout=c(1,2), type="l")
stepsPerInt <- aggregate(x=list("int_steps"=df$steps), by=list("interval"=df$interval, "w"=df$w), FUN=sum, na.rm=TRUE)
xyplot(int_steps~interval | w, data=stepsPerInt, layout=c(1,2), type="l")
head(df)
help(xyplot)
livrary("markdown")
library("markdown")
help(render)
help("./PA1_template.Rmd", "all")
help("./PA1_template.Rmd", "html_document")
render("./PA1_template.Rmd", "all")
library(markdown)
render("./PA1_template.Rmd", "all")
library(rmarkdown)
render("./PA1_template.Rmd", "all")
